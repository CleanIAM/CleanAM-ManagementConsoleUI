/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * CleanIAM
 * CleanIAM API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

export interface ApiApplicationModel {
  /** Gets or sets the id associated with the application. */
  id: string;
  applicationType: ApplicationType;
  /** Gets or sets the client identifier associated with the application. */
  clientId: string;
  clientType: ClientType;
  consentType: ConsentType;
  /**
   * Gets or sets the display name associated with the application.
   * @nullable
   */
  displayName: string | null;
  /** Allowed scopes for the application. */
  scopes: string[];
  /** Allowed endpoints for the application. */
  endpoints: string[];
  /** Allowed grant types for the application. */
  grantTypes: string[];
  /** Allowed response types for the application. */
  responseTypes: string[];
  /** Gets the post-logout redirect URIs associated with the application. */
  postLogoutRedirectUris: string[];
  /** Gets the redirect URIs associated with the application. */
  redirectUris: string[];
  /** Gets the requirements associated with the application. */
  requirements: string[];
}

/**
 * Api user model
 */
export interface ApiUserModel {
  /** Id of the user */
  id: string;
  /** Email of the user */
  email: string;
  /** First name of the user */
  firstName: string;
  /** last name of the user */
  lastName: string;
  /** User roles */
  roles: UserRole[];
}

export type ApplicationType = typeof ApplicationType[keyof typeof ApplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationType = {
  native: 'native',
  web: 'web',
} as const;

export type ClientType = typeof ClientType[keyof typeof ClientType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClientType = {
  public: 'public',
  confidential: 'confidential',
} as const;

export type ConsentType = typeof ConsentType[keyof typeof ConsentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConsentType = {
  explicit: 'explicit',
  external: 'external',
  implicit: 'implicit',
  systematic: 'systematic',
} as const;

export interface Error {
  message: string;
  code: number;
}

/**
 * Gets the additional properties associated with the application.
 */
export type OpenIdApplicationProperties = {[key: string]: unknown};

export interface OpenIdApplication {
  /** Gets or sets the id associated with the application. */
  id: string;
  applicationType: ApplicationType;
  /** Gets or sets the client identifier associated with the application. */
  clientId: string;
  clientType: ClientType;
  consentType: ConsentType;
  /**
   * Gets or sets the display name associated with the application.
   * @nullable
   */
  displayName: string | null;
  /** Allowed scopes for the application. */
  scopes: string[];
  /** Allowed endpoints for the application. */
  endpoints: string[];
  /** Allowed grant types for the application. */
  grantTypes: string[];
  /** Allowed response types for the application. */
  responseTypes: string[];
  /** Gets the post-logout redirect URIs associated with the application. */
  postLogoutRedirectUris: string[];
  /** Gets the additional properties associated with the application. */
  properties: OpenIdApplicationProperties;
  /** Gets the redirect URIs associated with the application. */
  redirectUris: string[];
}

export type OpenIdApplicationCreatedSettings = {[key: string]: string};

export interface OpenIdApplicationCreated {
  id: string;
  applicationType: ApplicationType;
  clientId: string;
  /** @nullable */
  clientSecret: string | null;
  clientType: ClientType;
  consentType: ConsentType;
  /** @nullable */
  displayName: string | null;
  permissions: string[];
  postLogoutRedirectUris: string[];
  redirectUris: string[];
  requirements: string[];
  settings: OpenIdApplicationCreatedSettings;
}

export interface OpenIdApplicationDeleted {
  id: string;
  displayName: string;
}

export type OpenIdApplicationUpdatedSettings = {[key: string]: string};

export interface OpenIdApplicationUpdated {
  id: string;
  applicationType: ApplicationType;
  clientId: string;
  clientType: ClientType;
  consentType: ConsentType;
  /** @nullable */
  displayName: string | null;
  permissions: string[];
  postLogoutRedirectUris: string[];
  redirectUris: string[];
  requirements: string[];
  settings: OpenIdApplicationUpdatedSettings;
}

export interface UpdateApplicationRequest {
  /** Gets or sets the id associated with the application. */
  id: string;
  applicationType: ApplicationType;
  /** Gets or sets the client identifier associated with the application. */
  clientId: string;
  clientType: ClientType;
  consentType: ConsentType;
  /**
   * Gets or sets the display name associated with the application.
   * @nullable
   */
  displayName: string | null;
  /** Allowed scopes for the application. */
  scopes: string[];
  /** Allowed endpoints for the application. */
  endpoints: string[];
  /** Allowed grant types for the application. */
  grantTypes: string[];
  /** Allowed response types for the application. */
  responseTypes: string[];
  /** Gets the post-logout redirect URIs associated with the application. */
  postLogoutRedirectUris: string[];
  /** Gets the redirect URIs associated with the application. */
  redirectUris: string[];
  /** Gets the requirements associated with the application. */
  requirements: string[];
}

export interface UserCreated {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  roles: UserRole[];
}

export interface UserDeleted {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  roles: UserRole[];
}

export type UserRole = typeof UserRole[keyof typeof UserRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
  user: 'user',
  admin: 'admin',
  superAdmin: 'superAdmin',
} as const;

export interface UserUpdated {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  roles: UserRole[];
}

export type PostApiApplicationsParams = {
/**
 * Gets or sets the id associated with the application.
 */
Id?: string;
/**
 * Gets or sets the application type associated with the application.
 */
ApplicationType?: ApplicationType;
/**
 * Gets or sets the client identifier associated with the application.
 */
ClientId?: string;
/**
 * Gets or sets the client type associated with the application.
 */
ClientType?: ClientType;
/**
 * Gets or sets the consent type associated with the application.
 */
ConsentType?: ConsentType;
/**
 * Gets or sets the display name associated with the application.
 */
DisplayName?: string;
/**
 * Allowed scopes for the application.
 */
Scopes?: string[];
/**
 * Allowed endpoints for the application.
 */
Endpoints?: string[];
/**
 * Allowed grant types for the application.
 */
GrantTypes?: string[];
/**
 * Allowed response types for the application.
 */
ResponseTypes?: string[];
/**
 * Gets the post-logout redirect URIs associated with the application.
 */
PostLogoutRedirectUris?: string[];
/**
 * Gets the redirect URIs associated with the application.
 */
RedirectUris?: string[];
/**
 * Gets the requirements associated with the application.
 */
Requirements?: string[];
};

export type PostApiUsersParams = {
/**
 * Email of the user
 */
Email: string;
/**
 * First name of the user
 */
FirstName: string;
/**
 * last name of the user
 */
LastName: string;
/**
 * User roles
 */
Roles: UserRole[];
};

export type GetApiUsersIdguidParams = {
/**
 * Id of the user to get
 */
id?: string;
};

export type PutApiUsersIdguidParams = {
/**
 * Id of user to update
 */
id?: string;
/**
 * Email of the user
 */
Email: string;
/**
 * First name of the user
 */
FirstName: string;
/**
 * last name of the user
 */
LastName: string;
/**
 * User roles
 */
Roles: UserRole[];
};

export type DeleteApiUsersIdguidParams = {
/**
 * Id of user to be deleted
 */
id?: string;
};

/**
 * @summary Show the main application page with a list of all applications.
 */
export type getApiApplicationsResponse200 = {
  data: ApiApplicationModel[]
  status: 200
}
    
export type getApiApplicationsResponseComposite = getApiApplicationsResponse200;
    
export type getApiApplicationsResponse = getApiApplicationsResponseComposite & {
  headers: Headers;
}

export const getGetApiApplicationsUrl = () => {


  

  return `/api/applications`
}

export const getApiApplications = async ( options?: RequestInit): Promise<getApiApplicationsResponse> => {
  
  const res = await fetch(getGetApiApplicationsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getApiApplicationsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getApiApplicationsResponse
}



export const getGetApiApplicationsQueryKey = () => {
    return [`/api/applications`] as const;
    }

    
export const getGetApiApplicationsQueryOptions = <TData = Awaited<ReturnType<typeof getApiApplications>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiApplicationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiApplications>>> = ({ signal }) => getApiApplications({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiApplications>>>
export type GetApiApplicationsQueryError = unknown


export function useGetApiApplications<TData = Awaited<ReturnType<typeof getApiApplications>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplications>>,
          TError,
          Awaited<ReturnType<typeof getApiApplications>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiApplications<TData = Awaited<ReturnType<typeof getApiApplications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplications>>,
          TError,
          Awaited<ReturnType<typeof getApiApplications>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiApplications<TData = Awaited<ReturnType<typeof getApiApplications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Show the main application page with a list of all applications.
 */

export function useGetApiApplications<TData = Awaited<ReturnType<typeof getApiApplications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiApplicationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new application
 */
export type postApiApplicationsResponse200 = {
  data: OpenIdApplicationCreated
  status: 200
}

export type postApiApplicationsResponse400 = {
  data: Error
  status: 400
}
    
export type postApiApplicationsResponseComposite = postApiApplicationsResponse200 | postApiApplicationsResponse400;
    
export type postApiApplicationsResponse = postApiApplicationsResponseComposite & {
  headers: Headers;
}

export const getPostApiApplicationsUrl = (params?: PostApiApplicationsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/applications?${stringifiedParams}` : `/api/applications`
}

export const postApiApplications = async (params?: PostApiApplicationsParams, options?: RequestInit): Promise<postApiApplicationsResponse> => {
  
  const res = await fetch(getPostApiApplicationsUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postApiApplicationsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postApiApplicationsResponse
}




export const getPostApiApplicationsMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiApplications>>, TError,{params?: PostApiApplicationsParams}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postApiApplications>>, TError,{params?: PostApiApplicationsParams}, TContext> => {
    
const mutationKey = ['postApiApplications'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiApplications>>, {params?: PostApiApplicationsParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiApplications(params,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiApplicationsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiApplications>>>
    
    export type PostApiApplicationsMutationError = Error

    /**
 * @summary Create new application
 */
export const usePostApiApplications = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiApplications>>, TError,{params?: PostApiApplicationsParams}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiApplications>>,
        TError,
        {params?: PostApiApplicationsParams},
        TContext
      > => {

      const mutationOptions = getPostApiApplicationsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get the application with the given id.
 */
export type getApiApplicationsIdResponse200 = {
  data: OpenIdApplication
  status: 200
}

export type getApiApplicationsIdResponse404 = {
  data: Error
  status: 404
}
    
export type getApiApplicationsIdResponseComposite = getApiApplicationsIdResponse200 | getApiApplicationsIdResponse404;
    
export type getApiApplicationsIdResponse = getApiApplicationsIdResponseComposite & {
  headers: Headers;
}

export const getGetApiApplicationsIdUrl = (id: string,) => {


  

  return `/api/applications/${id}`
}

export const getApiApplicationsId = async (id: string, options?: RequestInit): Promise<getApiApplicationsIdResponse> => {
  
  const res = await fetch(getGetApiApplicationsIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getApiApplicationsIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getApiApplicationsIdResponse
}



export const getGetApiApplicationsIdQueryKey = (id: string,) => {
    return [`/api/applications/${id}`] as const;
    }

    
export const getGetApiApplicationsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiApplicationsId>>, TError = Error>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiApplicationsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiApplicationsId>>> = ({ signal }) => getApiApplicationsId(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiApplicationsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiApplicationsId>>>
export type GetApiApplicationsIdQueryError = Error


export function useGetApiApplicationsId<TData = Awaited<ReturnType<typeof getApiApplicationsId>>, TError = Error>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplicationsId>>,
          TError,
          Awaited<ReturnType<typeof getApiApplicationsId>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiApplicationsId<TData = Awaited<ReturnType<typeof getApiApplicationsId>>, TError = Error>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplicationsId>>,
          TError,
          Awaited<ReturnType<typeof getApiApplicationsId>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiApplicationsId<TData = Awaited<ReturnType<typeof getApiApplicationsId>>, TError = Error>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the application with the given id.
 */

export function useGetApiApplicationsId<TData = Awaited<ReturnType<typeof getApiApplicationsId>>, TError = Error>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiApplicationsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update the application with the given id.
 */
export type putApiApplicationsIdResponse200 = {
  data: OpenIdApplicationUpdated
  status: 200
}

export type putApiApplicationsIdResponse404 = {
  data: Error
  status: 404
}
    
export type putApiApplicationsIdResponseComposite = putApiApplicationsIdResponse200 | putApiApplicationsIdResponse404;
    
export type putApiApplicationsIdResponse = putApiApplicationsIdResponseComposite & {
  headers: Headers;
}

export const getPutApiApplicationsIdUrl = (id: string,) => {


  

  return `/api/applications/${id}`
}

export const putApiApplicationsId = async (id: string,
    updateApplicationRequest: UpdateApplicationRequest, options?: RequestInit): Promise<putApiApplicationsIdResponse> => {
  
  const res = await fetch(getPutApiApplicationsIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateApplicationRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: putApiApplicationsIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as putApiApplicationsIdResponse
}




export const getPutApiApplicationsIdMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiApplicationsId>>, TError,{id: string;data: UpdateApplicationRequest}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof putApiApplicationsId>>, TError,{id: string;data: UpdateApplicationRequest}, TContext> => {
    
const mutationKey = ['putApiApplicationsId'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiApplicationsId>>, {id: string;data: UpdateApplicationRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiApplicationsId(id,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiApplicationsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiApplicationsId>>>
    export type PutApiApplicationsIdMutationBody = UpdateApplicationRequest
    export type PutApiApplicationsIdMutationError = Error

    /**
 * @summary Update the application with the given id.
 */
export const usePutApiApplicationsId = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiApplicationsId>>, TError,{id: string;data: UpdateApplicationRequest}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiApplicationsId>>,
        TError,
        {id: string;data: UpdateApplicationRequest},
        TContext
      > => {

      const mutationOptions = getPutApiApplicationsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Update the application with the given id.
 */
export type deleteApiApplicationsIdResponse200 = {
  data: OpenIdApplicationDeleted
  status: 200
}

export type deleteApiApplicationsIdResponse404 = {
  data: Error
  status: 404
}
    
export type deleteApiApplicationsIdResponseComposite = deleteApiApplicationsIdResponse200 | deleteApiApplicationsIdResponse404;
    
export type deleteApiApplicationsIdResponse = deleteApiApplicationsIdResponseComposite & {
  headers: Headers;
}

export const getDeleteApiApplicationsIdUrl = (id: string,) => {


  

  return `/api/applications/${id}`
}

export const deleteApiApplicationsId = async (id: string, options?: RequestInit): Promise<deleteApiApplicationsIdResponse> => {
  
  const res = await fetch(getDeleteApiApplicationsIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: deleteApiApplicationsIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as deleteApiApplicationsIdResponse
}




export const getDeleteApiApplicationsIdMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiApplicationsId>>, TError,{id: string}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiApplicationsId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteApiApplicationsId'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiApplicationsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiApplicationsId(id,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiApplicationsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiApplicationsId>>>
    
    export type DeleteApiApplicationsIdMutationError = Error

    /**
 * @summary Update the application with the given id.
 */
export const useDeleteApiApplicationsId = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiApplicationsId>>, TError,{id: string}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiApplicationsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiApplicationsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Test endpoint to check if the API is up and running.
 */
export type getTestResponse200 = {
  data: string
  status: 200
}
    
export type getTestResponseComposite = getTestResponse200;
    
export type getTestResponse = getTestResponseComposite & {
  headers: Headers;
}

export const getGetTestUrl = () => {


  

  return `/test`
}

export const getTest = async ( options?: RequestInit): Promise<getTestResponse> => {
  
  const res = await fetch(getGetTestUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getTestResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getTestResponse
}



export const getGetTestQueryKey = () => {
    return [`/test`] as const;
    }

    
export const getGetTestQueryOptions = <TData = Awaited<ReturnType<typeof getTest>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTestQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTest>>> = ({ signal }) => getTest({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTestQueryResult = NonNullable<Awaited<ReturnType<typeof getTest>>>
export type GetTestQueryError = unknown


export function useGetTest<TData = Awaited<ReturnType<typeof getTest>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTest>>,
          TError,
          Awaited<ReturnType<typeof getTest>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTest<TData = Awaited<ReturnType<typeof getTest>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTest>>,
          TError,
          Awaited<ReturnType<typeof getTest>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTest<TData = Awaited<ReturnType<typeof getTest>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Test endpoint to check if the API is up and running.
 */

export function useGetTest<TData = Awaited<ReturnType<typeof getTest>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTestQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all users
 */
export type getApiUsersResponse200 = {
  data: ApiUserModel[]
  status: 200
}

export type getApiUsersResponse500 = {
  data: Error
  status: 500
}
    
export type getApiUsersResponseComposite = getApiUsersResponse200 | getApiUsersResponse500;
    
export type getApiUsersResponse = getApiUsersResponseComposite & {
  headers: Headers;
}

export const getGetApiUsersUrl = () => {


  

  return `/api/users`
}

export const getApiUsers = async ( options?: RequestInit): Promise<getApiUsersResponse> => {
  
  const res = await fetch(getGetApiUsersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getApiUsersResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getApiUsersResponse
}



export const getGetApiUsersQueryKey = () => {
    return [`/api/users`] as const;
    }

    
export const getGetApiUsersQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsers>>, TError = Error>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsers>>> = ({ signal }) => getApiUsers({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsers>>>
export type GetApiUsersQueryError = Error


export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = Error>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = Error>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = Error>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all users
 */

export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = Error>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new user
 */
export type postApiUsersResponse200 = {
  data: UserCreated
  status: 200
}

export type postApiUsersResponse400 = {
  data: Error
  status: 400
}
    
export type postApiUsersResponseComposite = postApiUsersResponse200 | postApiUsersResponse400;
    
export type postApiUsersResponse = postApiUsersResponseComposite & {
  headers: Headers;
}

export const getPostApiUsersUrl = (params: PostApiUsersParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/users?${stringifiedParams}` : `/api/users`
}

export const postApiUsers = async (params: PostApiUsersParams, options?: RequestInit): Promise<postApiUsersResponse> => {
  
  const res = await fetch(getPostApiUsersUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postApiUsersResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postApiUsersResponse
}




export const getPostApiUsersMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsers>>, TError,{params: PostApiUsersParams}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postApiUsers>>, TError,{params: PostApiUsersParams}, TContext> => {
    
const mutationKey = ['postApiUsers'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUsers>>, {params: PostApiUsersParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiUsers(params,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUsers>>>
    
    export type PostApiUsersMutationError = Error

    /**
 * @summary Create new user
 */
export const usePostApiUsers = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsers>>, TError,{params: PostApiUsersParams}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiUsers>>,
        TError,
        {params: PostApiUsersParams},
        TContext
      > => {

      const mutationOptions = getPostApiUsersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get specific user by its id
 */
export type getApiUsersIdguidResponse200 = {
  data: ApiUserModel
  status: 200
}

export type getApiUsersIdguidResponse404 = {
  data: Error
  status: 404
}
    
export type getApiUsersIdguidResponseComposite = getApiUsersIdguidResponse200 | getApiUsersIdguidResponse404;
    
export type getApiUsersIdguidResponse = getApiUsersIdguidResponseComposite & {
  headers: Headers;
}

export const getGetApiUsersIdguidUrl = (params?: GetApiUsersIdguidParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/users/id:guid?${stringifiedParams}` : `/api/users/id:guid`
}

export const getApiUsersIdguid = async (params?: GetApiUsersIdguidParams, options?: RequestInit): Promise<getApiUsersIdguidResponse> => {
  
  const res = await fetch(getGetApiUsersIdguidUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getApiUsersIdguidResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getApiUsersIdguidResponse
}



export const getGetApiUsersIdguidQueryKey = (params?: GetApiUsersIdguidParams,) => {
    return [`/api/users/id:guid`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiUsersIdguidQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsersIdguid>>, TError = Error>(params?: GetApiUsersIdguidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersIdguidQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersIdguid>>> = ({ signal }) => getApiUsersIdguid(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersIdguidQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersIdguid>>>
export type GetApiUsersIdguidQueryError = Error


export function useGetApiUsersIdguid<TData = Awaited<ReturnType<typeof getApiUsersIdguid>>, TError = Error>(
 params: undefined |  GetApiUsersIdguidParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdguid>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdguid>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersIdguid<TData = Awaited<ReturnType<typeof getApiUsersIdguid>>, TError = Error>(
 params?: GetApiUsersIdguidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdguid>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdguid>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersIdguid<TData = Awaited<ReturnType<typeof getApiUsersIdguid>>, TError = Error>(
 params?: GetApiUsersIdguidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get specific user by its id
 */

export function useGetApiUsersIdguid<TData = Awaited<ReturnType<typeof getApiUsersIdguid>>, TError = Error>(
 params?: GetApiUsersIdguidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersIdguidQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update user
 */
export type putApiUsersIdguidResponse200 = {
  data: UserUpdated
  status: 200
}

export type putApiUsersIdguidResponse400 = {
  data: Error
  status: 400
}
    
export type putApiUsersIdguidResponseComposite = putApiUsersIdguidResponse200 | putApiUsersIdguidResponse400;
    
export type putApiUsersIdguidResponse = putApiUsersIdguidResponseComposite & {
  headers: Headers;
}

export const getPutApiUsersIdguidUrl = (params: PutApiUsersIdguidParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/users/id:guid?${stringifiedParams}` : `/api/users/id:guid`
}

export const putApiUsersIdguid = async (params: PutApiUsersIdguidParams, options?: RequestInit): Promise<putApiUsersIdguidResponse> => {
  
  const res = await fetch(getPutApiUsersIdguidUrl(params),
  {      
    ...options,
    method: 'PUT'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: putApiUsersIdguidResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as putApiUsersIdguidResponse
}




export const getPutApiUsersIdguidMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersIdguid>>, TError,{params: PutApiUsersIdguidParams}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof putApiUsersIdguid>>, TError,{params: PutApiUsersIdguidParams}, TContext> => {
    
const mutationKey = ['putApiUsersIdguid'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUsersIdguid>>, {params: PutApiUsersIdguidParams}> = (props) => {
          const {params} = props ?? {};

          return  putApiUsersIdguid(params,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUsersIdguidMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUsersIdguid>>>
    
    export type PutApiUsersIdguidMutationError = Error

    /**
 * @summary Update user
 */
export const usePutApiUsersIdguid = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersIdguid>>, TError,{params: PutApiUsersIdguidParams}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiUsersIdguid>>,
        TError,
        {params: PutApiUsersIdguidParams},
        TContext
      > => {

      const mutationOptions = getPutApiUsersIdguidMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Delete user
 */
export type deleteApiUsersIdguidResponse200 = {
  data: UserDeleted
  status: 200
}

export type deleteApiUsersIdguidResponse404 = {
  data: Error
  status: 404
}
    
export type deleteApiUsersIdguidResponseComposite = deleteApiUsersIdguidResponse200 | deleteApiUsersIdguidResponse404;
    
export type deleteApiUsersIdguidResponse = deleteApiUsersIdguidResponseComposite & {
  headers: Headers;
}

export const getDeleteApiUsersIdguidUrl = (params?: DeleteApiUsersIdguidParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/users/id:guid?${stringifiedParams}` : `/api/users/id:guid`
}

export const deleteApiUsersIdguid = async (params?: DeleteApiUsersIdguidParams, options?: RequestInit): Promise<deleteApiUsersIdguidResponse> => {
  
  const res = await fetch(getDeleteApiUsersIdguidUrl(params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: deleteApiUsersIdguidResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as deleteApiUsersIdguidResponse
}




export const getDeleteApiUsersIdguidMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersIdguid>>, TError,{params?: DeleteApiUsersIdguidParams}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersIdguid>>, TError,{params?: DeleteApiUsersIdguidParams}, TContext> => {
    
const mutationKey = ['deleteApiUsersIdguid'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiUsersIdguid>>, {params?: DeleteApiUsersIdguidParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiUsersIdguid(params,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiUsersIdguidMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiUsersIdguid>>>
    
    export type DeleteApiUsersIdguidMutationError = Error

    /**
 * @summary Delete user
 */
export const useDeleteApiUsersIdguid = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersIdguid>>, TError,{params?: DeleteApiUsersIdguidParams}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiUsersIdguid>>,
        TError,
        {params?: DeleteApiUsersIdguidParams},
        TContext
      > => {

      const mutationOptions = getDeleteApiUsersIdguidMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
